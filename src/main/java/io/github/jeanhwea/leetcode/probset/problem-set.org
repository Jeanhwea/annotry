#+TITLE: Problem Set
#+AUTHOR: Jinghui Hu
#+EMAIL: hujinghui@buaa.edu.cn
#+DATE: <2021-06-28 Mon 15:58:19>
#+HTML_LINK_UP: ../readme.html
#+HTML_LINK_HOME: ../index.html
#+SETUPFILE: ~/.emacs.d/site-lisp/org-html-themes/setup/theme-readtheorg-local.setup
#+TAGS: leetcode programming


* 数组 Array
  1. [X] [[https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array/][LC026]] [[file:ch01/Solution026.java][删除有序数组中的重复项]]
  2. [X] [[https://leetcode-cn.com/problems/remove-duplicates-from-sorted-array-ii/][LC080]] [[file:ch01/Solution080.java][删除有序数组中的重复项 II]]
  3. [X] [[https://leetcode-cn.com/problems/search-in-rotated-sorted-array/][LC033]] [[file:ch01/Solution033.java][搜索旋转排序数组]]
  4. [X] [[https://leetcode-cn.com/problems/search-in-rotated-sorted-array-ii/][LC081]] [[file:ch01/Solution081.java][搜索旋转排序数组 II]]
  5. [X] [[https://leetcode-cn.com/problems/rotate-array/][LC189]] [[file:ch01/Solution189.java][旋转数组]]
  6. [X] [[https://leetcode-cn.com/problems/median-of-two-sorted-arrays/][LC004]] [[file:ch01/Solution004.java][寻找两个正序数组的中位数]]
  7. [X] [[https://leetcode-cn.com/problems/longest-consecutive-sequence/][LC128]] [[file:ch01/Solution128.java][最长连续序列]]
  8. [X] [[https://leetcode-cn.com/problems/two-sum/][LC001]] [[file:ch01/Solution001.java][两数之和]]
  9. [X] [[https://leetcode-cn.com/problems/3sum/][LC015]] [[file:ch01/Solution015.java][三数之和]]
  10. [X] [[https://leetcode-cn.com/problems/3sum-closest/][LC016]] [[file:ch01/Solution016.java][最接近的三数之和]]
  11. [X] [[https://leetcode-cn.com/problems/4sum/][LC018]] [[file:ch01/Solution018.java][四数之和]]
  12. [X] [[https://leetcode-cn.com/problems/remove-element/][LC027]] [[file:ch01/Solution027.java][移除元素]]
  13. [ ] Next Permutation
  14. [X] [[https://leetcode-cn.com/problems/permutation-sequence/][LC060]] [[file:ch01/Solution060.java][排列顺序]]
  15. [ ] Valid Sudoku
  16. [ ] Trapping Rain Water
  17. [X] [[https://leetcode-cn.com/problems/spiral-matrix/][LC054]] [[file:ch01/Solution054.java][螺旋矩阵]]
  18. [ ] Rotate Image
  19. [X] [[https://leetcode-cn.com/problems/plus-one/][LC066]] [[file:ch01/Solution066.java][加一]]
  20. [ ] Climbing Stairs
  21. [ ] Gray Code
  22. [ ] Set Matrix Zeroes
  23. [ ] Gas Station
  24. [ ] Candy
  25. [ ] Single Number
  26. [ ] Single Number II

* 链表 List
  1. [ ] Add Two Numbers
  2. [ ] Reverse Linked List II
  3. [ ] Partition List
  4. [ ] Remove Duplicates from Sorted List
  5. [ ] Remove Duplicates from Sorted List II
  6. [ ] Rotate List
  7. [ ] Remove Nth Node From End of List
  8. [ ] Swap Nodes in Pairs
  9. [ ] Reverse Nodes in k- [ ]Group
  10. [ ] Copy List with Random Pointer
  11. [ ] Linked List Cycle
  12. [ ] Linked List Cycle II
  13. [ ] Reorder List
  14. [ ] LRU Cache

* 字符串 String
  1. [ ] Valid Palindrome
  2. [ ] Implement strStr
  3. [ ] String to Integer (atoi)
  4. [ ] Add Binary
  5. [ ] Longest Palindromic Substring
  6. [ ] Regular Expression Matching
  7. [ ] Wildcard Matching
  8. [ ] Longest Common Prefix
  9. [ ] Valid Number
  10. [ ] Integer to Roman
  11. [ ] Roman to Integer
  12. [ ] Count and Say
  13. [ ] Anagrams
  14. [ ] Simplify Path
  15. [ ] Length of Last Word

* 栈和队列 Stack & Heap
  1. [ ] Valid Parentheses
  2. [ ] Longest Valid Parentheses
  3. [ ] Largest Rectangle in Histogram
  4. [ ] Evaluate Reverse Polish Notation

* 树 Tree
  1. [X] [[https://leetcode-cn.com/problems/binary-tree-preorder-traversal/][LC144]] [[file:ch05/Solution144.java][二叉树的前序遍历]]
  2. [ ] Binary Tree Inorder Traversal
  3. [ ] Binary Tree Postorder Traversal
  4. [ ] Binary Tree Level Order Traversal
  5. [ ] Binary Tree Level Order Traversal II
  6. [ ] Binary Tree Zigzag Level Order Traversal
  7. [ ] Recover Binary Search Tree
  8. [ ] Same Tree
  9. [ ] Symmetric Tree
  10. [ ] Balanced Binary Tree
  11. [ ] Flatten Binary Tree to Linked List
  12. [ ] Populating Next Right Pointers in Each Node II
  13. [ ] Construct Binary Tree from Preorder and Inorder Traversal
  14. [ ] Construct Binary Tree from Inorder and Postorder Traversal
  15. [ ] Unique Binary Search Trees
  16. [ ] Unique Binary Search Trees II
  17. [ ] Validate Binary Search Tree
  18. [ ] Convert Sorted Array to Binary Search Tree
  19. [ ] Convert Sorted List to Binary Search Tree
  20. [ ] Minimum Depth of Binary Tree
  21. [ ] Maximum Depth of Binary Tree
  22. [ ] Path Sum
  23. [ ] Path Sum II
  24. [ ] Binary Tree Maximum Path Sum
  25. [ ] Populating Next Right Pointers in Each Node
  26. [ ] Sum Root to Leaf Numbers

* 排序和查找 Sorting & Searching
  1. [ ] Merge Sorted Array
  2. [ ] Merge Two Sorted Lists
  3. [ ] Merge k Sorted Lists
  4. [ ] Insertion Sort List
  5. [ ] Sort List
  6. [ ] First Missing Positive
  7. [ ] Sort Colors
  8. [ ] Search for a Range
  9. [ ] Search Insert Position
  10. [ ] Search a 2D Matrix

* 回溯 BackTrack
  1. [ ] Subsets
  2. [ ] Subsets II
  3. [ ] Permutations
  4. [ ] Permutations II
  5. [ ] Combinations
  6. [ ] Letter Combinations of a Phone Number

* 广度优先搜索 BFS
  1. [ ] Word Ladder
  2. [ ] Word Ladder II
  3. [ ] Surrounded Regions

* 深度优先搜索 DFS
  1. [ ] Palindrome Partitioning
  2. [ ] Unique Paths
  3. [ ] Unique Paths II
  4. [ ] N Queens
  5. [ ] N Queens II
  6. [ ] Restore IP Addresses
  7. [ ] Combination Sum
  8. [ ] Combination Sum II
  9. [ ] Generate Parentheses
  10. [ ] Sudoku Solver
  11. [ ] Word Search

* 分治 Divide and Conquer
  1. [ ] Pow(x,n)
  2. [ ] Sqrt(x)

* 贪心法 Greedy Algorithm
  1. [ ] Jump Game
  2. [ ] Jump Game II
  3. [ ] Best Time to Buy and Sell Stock
  4. [ ] Best Time to Buy and Sell Stock II
  5. [ ] Longest Substring Without Repeating Characters
  6. [ ] Container With Most Water

* 动态规划 Dynamic Programming
  1. [ ] Triangle
  2. [ ] Maximum Subarray
  3. [ ] Palindrome Partitioning II
  4. [ ] Maximal Rectangle
  5. [ ] Best Time to Buy and Sell Stock III
  6. [ ] Interleaving String
  7. [ ] Scramble String
  8. [ ] Minimum Path Sum
  9. [ ] Edit Distance
  10. [ ] Decode Ways
  11. [ ] Distinct Subsequences
  12. [ ] Word Break
  13. [ ] Word Break II

* 图 Graph
  1. [ ] Clone Graph
  2. [X] [[https://leetcode-cn.com/problems/max-area-of-island/][LC695]] [[file:ch13/Solution695.java][岛屿的最大面积]]

* 细节题 Misc
  1. [ ] Reverse Integer
  2. [ ] Palindrome Number
  3. [ ] Insert Interval
  4. [ ] Merge Intervals
  5. [ ] Minimum Window Substring
  6. [ ] Multiply Strings
  7. [ ] Substring with Concatenation of All Words
  8. [ ] Pascal's Triangle
  9. [ ] Pascal's Triangle II
  10. [ ] Spiral Matrix
  11. [ ] Spiral Matrix II
  12. [ ] ZigZag Conversion
  13. [ ] Divide Two Integers
  14. [ ] Text Justification
  15. [ ] Max Points on a Line
